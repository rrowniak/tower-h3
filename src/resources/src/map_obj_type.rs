use crate::map_structs::*;
use crate::map_buildings::*;

#[derive(Debug, Default)]
pub enum ObjectType {
    #[default]
    AltarOfSacrifice,
    AnchorPoint,
    Arena,
    Artifact(Option<CreatureGuard>),
    PandorasBox(BoxContent),
    BlackMarket,
    Boat,
    Borderguard,
    Keymaster,
    Buoy,
    Campfire,
    Cartographer,
    SwanPond,
    CoverOfDarkness,
    CreatureBank,
    CreatureGenerator1{owner: Option<Ownership>},
    CreatureGenerator2{owner: Option<Ownership>},
    CreatureGenerator3{owner: Option<Ownership>},
    CreatureGenerator4{owner: Option<Ownership>},
    CursedGround1,
    Corpse,
    MarlettoTower,
    DerelictShip,
    DragonUtopia,
    Event(EventData),
    EyeOfMagi,
    FaerieRing,
    Flotsam,
    FountainOfFortune,
    FountainOfYouth,
    GardenOfRevelation,
    Garrison(GarrisonData),
    Hero(HeroData),
    HillFort,
    Grail{radius: i32},
    HutOfMagi,
    IdolOfFortune,
    LeanTo,
    LibraryOfEnlightenment,
    Lighthouse{owner: Option<Ownership>},
    MonolithOneWayEntrance,
    MonolithOneWayExit,
    MonolithTwoWay,
    MagicPlains1,
    SchoolOfMagic,
    MagicSpring,
    MagicWell,
    MarketOfTime,
    MercenaryCamp,
    Mermaid,
    Mine(MineData),
    Monster(MonsterData),
    MysticalGarden,
    Oasis,
    Obelisk,
    RedwoodObservatory,
    OceanBottle(String),
    PillarOfFire,
    StarAxis,
    Prison(HeroData),
    PyramidOrWogObject, //subtype 0 for pyramid, >0 for Wog object
    RallyFlag,
    RandomArt(Option<CreatureGuard>),
    RandomTreasureArt(Option<CreatureGuard>),
    RandomMinorArt(Option<CreatureGuard>),
    RandomMajorArt(Option<CreatureGuard>),
    RandomRelicArt(Option<CreatureGuard>),
    RandomHero(HeroData),
    RandomMonster(MonsterData),
    RandomMonsterL1(MonsterData),
    RandomMonsterL2(MonsterData),
    RandomMonsterL3(MonsterData),
    RandomMonsterL4(MonsterData),
    RandomResource(ResourceData),
    RandomTown(TownData),
    RefugeeCamp,
    Resource(ResourceData),
    Sanctuary,
    Scholar(ScholarBonus),
    SeaChest,
    SeerHut(Vec<SeerHutData>),
    Crypt,
    Shipwreck,
    ShipwreckSurvivor,
    Shipyard{owner: Option<Ownership>},
    ShrineOfMagicIncantation{spell_id: u32},
    ShrineOfMagicGesture{spell_id: u32},
    ShrineOfMagicThought{spell_id: u32},
    Sign(String),
    Sirens,
    SpellScroll(SpellScrollData),
    Stables,
    Tavern,
    Temple,
    DenOfThieves,
    Town(TownData),
    TradingPost,
    LearningStone,
    TreasureChest,
    TreeOfKnowledge,
    SubterraneanGate,
    University,
    Wagon,
    WarMachineFactory,
    SchoolOfWar,
    WarriorsTomb,
    WaterWheel,
    WateringHole,
    Whirlpool,
    Windmill,
    WitchHut{secondary_skills: Vec<u8>},
    Brush, // Todo: How does it look like?
    Bush,
    Cactus,
    Canyon,
    Crater,
    DeadVegetation,
    Flowers,
    FrozenLake,
    Hedge,
    Hill,
    Hole,
    Kelp,
    Lake,
    LavaFlow,
    LavaLake,
    Mushrooms,
    Log,
    Mandrake,
    Moss,
    Mound,
    Mountain,
    OakTrees,
    Outcropping,
    PineTrees,
    Plant,
    RiverDelta,
    Rock,
    SandDune,
    SandPit,
    Shrub,
    Skull,
    Stalagmite,
    Stump,
    TarPit,
    Trees,
    Vine,
    VolcanicVent,
    Volcano,
    WillowTrees,
    YuccaTrees,
    Reef,
    RandomMonsterL5(MonsterData),
    RandomMonsterL6(MonsterData),
    RandomMonsterL7(MonsterData),
    BorderGate,
    FreelancersGuild,
    HeroPlaceholder,
    QuestGuard,
    RandomDwelling,
    RandomDwellingLvl,     //subtype = creature level
    RandomDwellingFaction, //subtype = faction
    Garrison2(GarrisonData),
    AbandonedMine(MineData),
    TradingPostSnow,
    CloverField,
    CursedGround2,
    EvilFog,
    FavorableWinds,
    FieryFields,
    HolyGrounds,
    LucidPools,
    MagicClouds,
    MagicPlains2,
    Rocklands,
}

impl ObjectType {
    pub fn from(code: u32) -> Option<Self> {
        use ObjectType::*;
        let ret = match code {
            2 => AltarOfSacrifice,
            3 => AnchorPoint,
            4 => Arena,
            5 => Artifact(None),
            6 => PandorasBox(BoxContent::default()),
            7 => BlackMarket,
            8 => Boat,
            9 => Borderguard,
            10 => Keymaster,
            11 => Buoy,
            12 => Campfire,
            13 => Cartographer,
            14 => SwanPond,
            15 => CoverOfDarkness,
            16 => CreatureBank,
            17 => CreatureGenerator1{owner: None},
            18 => CreatureGenerator2{owner: None},
            19 => CreatureGenerator3{owner: None},
            20 => CreatureGenerator4{owner: None},
            21 => CursedGround1,
            22 => Corpse,
            23 => MarlettoTower,
            24 => DerelictShip,
            25 => DragonUtopia,
            26 => Event(EventData::default()),
            27 => EyeOfMagi,
            28 => FaerieRing,
            29 => Flotsam,
            30 => FountainOfFortune,
            31 => FountainOfYouth,
            32 => GardenOfRevelation,
            33 => Garrison(GarrisonData::default()),
            34 => Hero(HeroData::default()),
            35 => HillFort,
            36 => Grail{radius: 0},
            37 => HutOfMagi,
            38 => IdolOfFortune,
            39 => LeanTo,
            41 => LibraryOfEnlightenment,
            42 => Lighthouse{owner: None},
            43 => MonolithOneWayEntrance,
            44 => MonolithOneWayExit,
            45 => MonolithTwoWay,
            46 => MagicPlains1,
            47 => SchoolOfMagic,
            48 => MagicSpring,
            49 => MagicWell,
            50 => MarketOfTime,
            51 => MercenaryCamp,
            52 => Mermaid,
            53 => Mine(MineData::default()),
            54 => Monster(MonsterData::default()),
            55 => MysticalGarden,
            56 => Oasis,
            57 => Obelisk,
            58 => RedwoodObservatory,
            59 => OceanBottle(String::new()),
            60 => PillarOfFire,
            61 => StarAxis,
            62 => Prison(HeroData::default()),
            63 => PyramidOrWogObject, //subtype 0 for pyramid, >0 for Wog object
            64 => RallyFlag,
            65 => RandomArt(None),
            66 => RandomTreasureArt(None),
            67 => RandomMinorArt(None),
            68 => RandomMajorArt(None),
            69 => RandomRelicArt(None),
            70 => RandomHero(HeroData::default()),
            71 => RandomMonster(MonsterData::default()),
            72 => RandomMonsterL1(MonsterData::default()),
            73 => RandomMonsterL2(MonsterData::default()),
            74 => RandomMonsterL3(MonsterData::default()),
            75 => RandomMonsterL4(MonsterData::default()),
            76 => RandomResource(ResourceData::default()),
            77 => RandomTown(TownData::default()),
            78 => RefugeeCamp,
            79 => Resource(ResourceData::default()),
            80 => Sanctuary,
            81 => Scholar(ScholarBonus::default()),
            82 => SeaChest,
            83 => SeerHut(Vec::new()),
            84 => Crypt,
            85 => Shipwreck,
            86 => ShipwreckSurvivor,
            87 => Shipyard{owner: None},
            88 => ShrineOfMagicIncantation{spell_id : 0},
            89 => ShrineOfMagicGesture{spell_id : 0},
            90 => ShrineOfMagicThought{spell_id : 0},
            91 => Sign(String::new()),
            92 => Sirens,
            93 => SpellScroll(SpellScrollData::default()),
            94 => Stables,
            95 => Tavern,
            96 => Temple,
            97 => DenOfThieves,
            98 => Town(TownData::default()),
            99 => TradingPost,
            100 => LearningStone,
            101 => TreasureChest,
            102 => TreeOfKnowledge,
            103 => SubterraneanGate,
            104 => University,
            105 => Wagon,
            106 => WarMachineFactory,
            107 => SchoolOfWar,
            108 => WarriorsTomb,
            109 => WaterWheel,
            110 => WateringHole,
            111 => Whirlpool,
            112 => Windmill,
            113 => WitchHut{secondary_skills: Vec::new()},
            114 => Brush, // Todo: How does it look like?
            115 => Bush,
            116 => Cactus,
            117 => Canyon,
            118 => Crater,
            119 => DeadVegetation,
            120 => Flowers,
            121 => FrozenLake,
            122 => Hedge,
            123 => Hill,
            124 => Hole,
            125 => Kelp,
            126 => Lake,
            127 => LavaFlow,
            128 => LavaLake,
            129 => Mushrooms,
            130 => Log,
            131 => Mandrake,
            132 => Moss,
            133 => Mound,
            134 => Mountain,
            135 => OakTrees,
            136 => Outcropping,
            137 => PineTrees,
            138 => Plant,
            143 => RiverDelta,
            147 => Rock,
            148 => SandDune,
            149 => SandPit,
            150 => Shrub,
            151 => Skull,
            152 => Stalagmite,
            153 => Stump,
            154 => TarPit,
            155 => Trees,
            156 => Vine,
            157 => VolcanicVent,
            158 => Volcano,
            159 => WillowTrees,
            160 => YuccaTrees,
            161 => Reef,
            162 => RandomMonsterL5(MonsterData::default()),
            163 => RandomMonsterL6(MonsterData::default()),
            164 => RandomMonsterL7(MonsterData::default()),
            212 => BorderGate,
            213 => FreelancersGuild,
            214 => HeroPlaceholder,
            215 => QuestGuard,
            216 => RandomDwelling,
            217 => RandomDwellingLvl,     //subtype = creature level
            218 => RandomDwellingFaction, //subtype = faction
            219 => Garrison2(GarrisonData::default()),
            220 => AbandonedMine(MineData::default()),
            221 => TradingPostSnow,
            222 => CloverField,
            223 => CursedGround2,
            224 => EvilFog,
            225 => FavorableWinds,
            226 => FieryFields,
            227 => HolyGrounds,
            228 => LucidPools,
            229 => MagicClouds,
            230 => MagicPlains2,
            231 => Rocklands,
            _ => return None,
        };
        Some(ret)
    }
}

#[derive(Debug, Default)]
pub struct EventData {
    pub available_for: Vec<Player>,
    pub computer_can_activate: bool,
    pub human_can_activate: bool,
    pub remove_after_visit: bool,
    pub box_content: Option<BoxContent>,
}

#[derive(Debug, Default)]
pub struct MonsterData {
    pub id: u32,
    pub amount: u32,
    pub character: u8,
    pub message: Option<String>,
    pub resources: Option<ResourcePack>,
    pub artifact: Option<ArtifactId>,
    pub never_flees: bool,
    pub growing_team: bool,
    pub aggression_factor: Option<u32>,
    pub join_only_for_money: Option<bool>,
    pub join_percentage: Option<u32>,
    pub upgraded_creatures: Option<u32>,
    pub creatures_on_battle: Option<u32>,
}

#[derive(Debug, Default)]
pub struct MineData {
    pub owner: Option<Ownership>,
    pub abandoned_resources: Vec<Resource>,
}

#[derive(Debug, Default)]
pub struct HeroData {
    pub quest_id: u32,
    pub owner: Option<Ownership>,
    pub hero_id: u32,
    pub name: Option<String>,
    pub experience: Option<u32>,
    pub portrait_id: Option<u8>,
    pub secondary_skills: Vec<SecSkill>,
    pub garison: Vec<CreatureSlot>,
    pub army_formation: ArmyFormation,
    pub artifacts: Vec<HeroesArtifact>,
    pub artifacts_in_bag: Vec<ArtifactId>,
    pub patrol_radius: u8,
    pub custom_biography: Option<String>,
    pub gender: Option<Gender>,
    pub custom_spells: Vec<u8>,
    pub custom_primary_skills: Option<PrimarySkills>,
}

#[derive(Default, Debug)]
pub struct SpellScrollData {
    pub guards: Option<CreatureGuard>,
    pub spell_scroll_id: u32,
}

#[derive(Default, Debug)]
pub struct ResourceData {
    pub guards: Option<CreatureGuard>,
    pub amount: u32,
}


#[derive(Default, Debug, PartialEq, Eq)]
pub enum QuestMission {
    #[default]
    NoMission,
    ExpLevel(u32),
    PrimarySkill(PrimarySkills),
    KillHero(u32),
    KillCreature(u32),
    Artifact(Vec<ArtifactId>),
    Army(Vec<(CreatureId, u32)>),
    Resources(ResourcePack),
    Hero(u8),
    Player(Option<Player>),
    HOTAMulti,
    Keymaster,
    HOTAHeroClass(Vec<u8>),
    HOTAReachDate(u32),
}

impl QuestMission {
    pub fn from(code: u8) -> Self {
        use QuestMission::*;
        match code {
            0 => NoMission,
            1 => ExpLevel(0),
            2 => PrimarySkill(PrimarySkills::default()),
            3 => KillHero(0),
            4 => KillCreature(0),
            5 => Artifact(Vec::new()),
            6 => Army(Vec::new()),
            7 => Resources(ResourcePack::default()),
            8 => Hero(0),
            9 => Player(None),
            10 => HOTAMulti,
            11 => Keymaster,
            12 => HOTAHeroClass(Vec::new()),
            13 => HOTAReachDate(0),
            _ => NoMission,
        }
    }
}

#[derive(Debug, Default)]
pub enum SeerHutRewardType {
    #[default]
    Nothing,
    Experience(u32),
    ManaPoints(u32),
    Morale(i8),
    Luck(i8),
    Resources((u8, u32)),
    PrimarySkills(PrimarySkills),
    SecondarySkills(Vec<SecSkill>),
    Artifact(Vec<ArtifactId>),
    Spell(Vec<u8>),
    Creature(Vec<(CreatureId, u32)>),
}

impl SeerHutRewardType {
    pub fn from(code: u8) -> Self {
        use SeerHutRewardType::*;
        match code {
            0 => Nothing,
            1 => Experience(0),
            2 => ManaPoints(0),
            3 => Morale(0),
            4 => Luck(0),
            5 => Resources((0, 0)),
            6 => PrimarySkills(crate::map_structs::PrimarySkills::default()),
            7 => SecondarySkills(Vec::new()),
            8 => Artifact(Vec::new()),
            9 => Spell(Vec::new()),
            10 => Creature(Vec::new()),
            _ => Nothing,
        }
    }
}
#[derive(Default, Debug)]
pub struct SeerHutData {
    pub repeateable: bool,
    pub mission: QuestMission,
    pub time_limit: Option<u32>,
    pub is_custom_first: bool,
    pub is_custom_last: bool,
    pub is_custom_complete: bool,
    pub reward: SeerHutRewardType,
}

#[derive(Default, Debug)]
pub enum ScholarBonus {
    PrimarySkill(u8),
    SecondarySkill(u8),
    Spell(u8),
    #[default]
    Random,
}

impl ScholarBonus {
    pub fn from(code: u8, id: u8) -> Self {
        use ScholarBonus::*;
        match code {
            0 => PrimarySkill(id),
            1 => SecondarySkill(id),
            2 => Spell(id),
            0xff => Random,
            _ => Random,
        }
    }
}

#[derive(Debug, Default)]
pub struct GarrisonData {
    pub owner: Option<Ownership>,
    pub guards: Vec<CreatureSlot>,
    pub removable_units: bool,
}

#[derive(Debug, Default)]
pub struct TownEvent {
    pub name: String,
    pub message: String,
    pub resources: ResourcePack,
    pub players: Vec<Player>,
    pub human_affected: bool,
    pub computer_affected: bool,
    pub first_occurrence_at: u16,
    pub next_occurrence: u8,
    pub new_buildings: Vec<Buildings>,
    pub new_creatures_at: Vec<(u8, u16)>,
}
#[derive(Debug, Default)]
pub struct TownData {
    pub id: u32,
    pub owner: Option<Ownership>,
    pub name: Option<String>,
    pub guards: Vec<CreatureSlot>,
    pub army_formation: ArmyFormation, 
    pub built_buildings: Vec<Buildings>,
    pub forbidden_buildings: Vec<Buildings>,
    pub obligatory_spells: Vec<u8>,
    pub possible_spells: Vec<u8>,
    pub events: Vec<TownEvent>,
    pub alignment_to_player: Option<Player>,
}
